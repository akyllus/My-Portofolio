// Example using jsonwebtoken for token creation and verification
// This is just a simplified example; use a dedicated authentication library in a real project.

use jsonwebtoken::{encode, decode, Header, Validation, Algorithm};

#[derive(Debug, Serialize, Deserialize)]
struct Claims {
    sub: String,
    exp: usize,
}

fn create_token(user_id: &str) -> String {
    let claims = Claims {
        sub: user_id.to_string(),
        exp: (chrono::Utc::now() + chrono::Duration::hours(1)).timestamp() as usize,
    };

    encode(&Header::default(), &claims, "your-secret-key".as_ref()).unwrap()
}

fn verify_token(token: &str) -> Result<Claims, jsonwebtoken::errors::Error> {
    decode::<Claims>(token, "your-secret-key".as_ref(), &Validation::new(Algorithm::HS256))
        .map(|data| data.claims)
}
